Internationalization
====================

Translation files
-----------------

Translations are just a simple JSON file.
This is a mapping table between English and the language, for example:

.. code:: json

    {
        "Username": "Nom d'utilisateur",
        "Password": "Mot de passe",
        "Unable to parse Atom feed: %v.": "Impossible de lire ce flux Atom: %v."
    }

Placeholders are the ones used by the package `fmt <https://golang.org/pkg/fmt/#hdr-Printing>`_.

Plural forms
------------

Some languages have different rules regarding plurals.
These rules are defined in the file :code:`locale/plurals.go`.
You could add more rules if yours is not available.

In the JSON file, a plural translation is defined like that:

.. code:: json

    {
        "plural.feed.error_count": [
            "%d error",
            "%d errors"
        ]
    }

This example is for the English language, the plural form is :code:`plurals=2; plural=(n != 1);`.
For one error, we will have :code:`1 error`, for 2 or more errors: :code:`3 errors`.

You could find the different plural forms here:

- `<https://localization-guide.readthedocs.io/en/latest/l10n/pluralforms.html>`_
- `<http://www.unicode.org/cldr/charts/29/supplemental/language_plural_rules.html>`_

How to add a new language?
--------------------------

1) Checkout the source code from the repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create a fork of the project and clone the repository:

.. code:: bash

    cd $GOPATH/src
    mkdir -p github.com/miniflux
    git clone https://github.com/<your_username>/miniflux.git

2) Create a new translation file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- In the folder :code:`locale/translations`, create a new JSON file, for example, :code:`de_DE.json` for German.
- You could copy the translations from :code:`fr_FR.json` and replace the strings.

3) Add the language to the list
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Open the file :code:`locale/locale.go`, and edit the function :code:`AvailableLanguages()`.

.. code:: go

    func AvailableLanguages() map[string]string {
        return map[string]string{
            "en_US": "English",
            "fr_FR": "Fran√ßais",
        }
    }

This function returns a mapping table of available languages.
On the left, you have the language code and on the right the language name written in native language.

4) Test the translations
~~~~~~~~~~~~~~~~~~~~~~~~

Translation files are embedded into the application executable.
You must compile the software to see the changes.

.. code:: bash

    make run

You must have a local development environment configured properly.

5) Create a branch and send a pull-request
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Your pull-request should contains only 3 files:

- :code:`locale/translations/xx_XX.json`
- :code:`locale/locale.go`
- :code:`locale/translations.go`

If you don't know how to send a pull-request, here is the documentation of GitHub: `<https://help.github.com/articles/creating-a-pull-request/#creating-the-pull-request>`_
